#lang racket

;;http://tetris.wikia.com/wiki/Tetris_Guideline
(require htdp/draw)
(require lang/posn)

;;https://github.com/racket/frtime/blob/master/demos/tetris.rkt << take a look

;;definição das dimensões da tela (largura e altura) -> 10 colunas x 22 linhas (as duas de cima hidden (para spawn de I)
(define largura 250)
(define altura 550)
(define colunas 10)
(define linhas 22)

;;square é cada quadrado da tela, definido pelo tipo ("void", "solid" ou "mobile") e cor (I - DeepSkyBlue, O - Gold, T - Purple, S - Green, Z - Red, J - DarkOrange, L - Blue, void - White)
;;a tela será uma lista de listas de squares
(define-struct square (type color))

;;block é o tetrominos controlado pelo usuário, definido pelas coordenadas do centroide, orientação (north, south, east, west) e tipo (I, O, T, S, Z, J, ou L)
(define-struct block (type xc yc orient))

;;canvas-block é um conjunto de 4 coordenadas de quadrados a serem colocados na tela, e seu tipo)
(define-struct canvas-block (type x1 y1 x2 y2 x3 y3 x4 y4))

;;exemplo de tela fictícia
(define ex-tela (list
                 (list (make-square "void" 'white)(make-square "void" 'white)(make-square "void" 'white))
                 (list (make-square "void" 'white)(make-square "void" 'white)(make-square "void" 'white))
                 (list (make-square "void" 'white)(make-square "void" 'white)(make-square "void" 'white))
                 (list (make-square "void" 'white)(make-square "void" 'white)(make-square "void" 'white))
                 (list (make-square "void" 'white)(make-square "solid" 'blue)(make-square "void" 'white))
                 (list (make-square "void" 'white)(make-square "solid" 'green)(make-square "solid" 'green))
                 (list (make-square "solid" 'green)(make-square "solid" 'green)(make-square "solid" 'red))))

;;exemplos de blocos: tipo, coordenada do centróide, orientação
(define ex-I-block (make-block 'I 6 6 'north))
(define ex-O-block (make-block 'O 6 6 'north))
(define ex-T-block (make-block 'T 6 6 'north))
(define ex-S-block (make-block 'S 6 6 'north))
(define ex-Z-block (make-block 'Z 6 6 'north))
(define ex-J-block (make-block 'J 6 6 'north))
(define ex-L-block (make-block 'L 6 6 'north))

;;lista de tipos
(define lista-tipos (list 'I 'O 'T 'S 'Z 'J 'L))

;;lista de orientacoes
(define lista-orient (list 'north 'south 'east 'west))

;;line-generator: inteiro string symbol -> lista (linha da tela)
;;gera uma linha da tela inicial, dependente de "colunas", do tipo e da cor desejada
(define (line-generator col type color)
  (cond
    [(= col 0) empty]
    [else (cons (make-square type color) (line-generator (- col 1) type color))]))

(define full-line (line-generator colunas "solid" 'red))
(define void-line (line-generator colunas "void" 'white))

;;screen-generator: inteiro inteiro -> tela
;;gera uma tela de jogo inicial condizente com "linhas" e "colunas"
(define (screen-generator lin col)
  (cond
    [(= lin 0) empty]
    [else (cons (line-generator col "void" 'white) (screen-generator (- lin 1) col))]))

;;get-nesimo: list inteiro -> elemento-da-lista
;;retorna o n-esimo elemento da lista
(define get-nesimo                     
   (lambda (n list)                   
      (cond ((null? list) '())             
            ((= n 0) (car list))              
            (else (get-nesimo (- n 1) (cdr list))))))

;;get-screen-xy: tela inteiro inteiro -> square
;;retorna o square da tela na posição (x,y)
(define (get-screen-xy tela x y)
  (get-nesimo x (get-nesimo y tela)))

;;full-line?: lista-de-squares -> bool
;;retorna se a lista está completamente preenchida
(define (full-line? l)
  (cond
    [(empty? l) #t]
    [(not(string=? (square-type (first l)) "solid")) #f]
    [else (full-line? (rest l))]))

;;not-full-line?: lista-de-squares -> bool
;;retorna se a lista não está completamente preenchida
(define (not-full-line? l)
  (not (full-line? l)))

;;count-full-lines: tela -> inteiro
;;retorna o numero de linhas preenchidas
(define (count-full-lines t)
  (cond
    [(empty? t) 0]
    [(full-line? (first t)) (+ 1 (count-full-lines (rest t)))]
    [else (count-full-lines (rest t))]))

;;delete-full-lines: tela -> tela
;;retorna a tela sem as linhas preenchidas
(define (delete-full-lines t)
  (filter not-full-line? t))

;;append-void-lines: tela inteiro -> tela
;;retorna a tela com um número de linhas vazias adicionado acima
;;uso nesse programa: (append-void-lines (delete-full-lines t) (count-full-lines t))
(define (append-void-lines t n)
  (cond
    [(= 0 n) t]
    [else (cons void-line (append-void-lines t (- n 1)))]))

;;rot-right: symbol -> symbol
;;retorna a nova orientação do bloco rotacionado para a direita
(define (rot-right b)
  (cond
    [(eq? b 'north) 'east]
    [(eq? b 'east) 'south]
    [(eq? b 'south) 'west]
    [(eq? b 'west) 'north]))

;;rot-left: symbol -> symbol
;;retorna a nova orientação do bloco rotacionado para a esquerda
(define (rot-left b)
  (cond
    [(eq? b 'north) 'west]
    [(eq? b 'west) 'south]
    [(eq? b 'south) 'east]
    [(eq? b 'east) 'north]))

;;rotate-block: block symbol -> block
;;retorna o bloco rotacionado para a direita ('right) ou para a esquerda ('left)
(define (rotate-block b rot)
  (cond
    [(eq? rot 'right) (make-block (block-type b) (block-xc b) (block-yc b) (rot-right (block-orient b)))]
    [(eq? rot 'left) (make-block (block-type b) (block-xc b) (block-yc b) (rot-left (block-orient b)))]))

;;convert-block: block -> canvas
;;converte um bloco para colocar no canvas
;;http://i.stack.imgur.com/JLRFu.png (primeira coluna (da esquerda para a direita) = 'north, segunda = 'east, terceira = 'south, quarta = 'west)
(define (convert-block b)
  (cond 
    [(eq? (block-type b) 'O) (make-canvas-block (block-type b)
                                                (- (block-xc b) 1) (block-yc b)
                                                (block-xc b) (block-yc b)
                                                (- (block-xc b) 1) (- (block-yc b) 1)
                                                (block-xc b) (- (block-yc b) 1))]
    [(eq? (block-type b) 'I) (cond
                               [(eq? (block-orient b) 'south) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 2) (block-yc b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'east) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 2)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (block-xc b) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'north) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 2) (- (block-yc b) 1)
                                                                                 (- (block-xc b) 1) (- (block-yc b) 1)
                                                                                 (block-xc b) (- (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'west) (make-canvas-block (block-type b)
                                                                                (- (block-xc b) 1) (+ (block-yc b) 2)
                                                                                (- (block-xc b) 1) (+ (block-yc b) 1)
                                                                                (- (block-xc b) 1) (block-yc b)
                                                                                (- (block-xc b) 1) (- (block-yc b) 1))])]
    [(eq? (block-type b) 'T) (cond
                               [(eq? (block-orient b) 'south) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (block-xc b) (+ (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'east) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (+ (block-xc b) 1) (block-yc b)
                                                                                (block-xc b) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'north) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (block-xc b) (- (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'west) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (- (block-xc b) 1) (block-yc b)
                                                                                (block-xc b) (- (block-yc b) 1))])]
    [(eq? (block-type b) 'J) (cond
                               [(eq? (block-orient b) 'south) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (- (block-xc b) 1) (+ (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'east) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (+ (block-xc b) 1) (+ (block-yc b) 1)
                                                                                (block-xc b) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'north) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (+ (block-xc b) 1) (- (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'west) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (- (block-xc b) 1) (- (block-yc b) 1)
                                                                                (block-xc b) (- (block-yc b) 1))])]
    [(eq? (block-type b) 'L) (cond
                               [(eq? (block-orient b) 'south) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (+ (block-xc b) 1) (+ (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'east) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (+ (block-xc b) 1) (- (block-yc b) 1)
                                                                                (block-xc b) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'north) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (- (block-xc b) 1) (- (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'west) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (- (block-xc b) 1) (+ (block-yc b) 1)
                                                                                (block-xc b) (- (block-yc b) 1))])]
     [(eq? (block-type b) 'S) (cond
                               [(eq? (block-orient b) 'south) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (+ (block-yc b) 1)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (block-xc b) (+ (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'east) (make-canvas-block (block-type b)
                                                                                (+ (block-xc b) 1) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (+ (block-xc b) 1) (block-yc b)
                                                                                (block-xc b) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'north) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (block-xc b) (- (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'west) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (- (block-xc b) 1) (block-yc b)
                                                                                (- (block-xc b) 1) (- (block-yc b) 1))])]
    [(eq? (block-type b) 'Z) (cond
                               [(eq? (block-orient b) 'south) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (block-xc b) (+ (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (+ (block-yc b) 1))]
                               [(eq? (block-orient b) 'east) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (+ (block-xc b) 1) (block-yc b)
                                                                                (+ (block-xc b) 1) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'north) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (- (block-yc b) 1)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (block-xc b) (- (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'west) (make-canvas-block (block-type b)
                                                                                (- (block-xc b) 1) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (- (block-xc b) 1) (block-yc b)
                                                                                (block-xc b) (- (block-yc b) 1))])]))

;;get-block-color: canvas-blockOUblock -> String (cor)
;;retorna a cor do bloco (I - DeepSkyBlue, O - Gold, T - Purple, S - Green, Z - Red, J - DarkOrange, L - Blue)
(define (get-block-color b)
  (local
    [(define (type b)
       (cond
         [(block? b) (block-type b)]
         [(canvas-block? b) (canvas-block-type b)]))
     ]
    (cond
      [(eq? (type b) 'I) 'DeepSkyBlue]
      [(eq? (type b) 'O) 'Gold]
      [(eq? (type b) 'T) 'Purple]
      [(eq? (type b) 'S) 'Green]
      [(eq? (type b) 'Z) 'Red]
      [(eq? (type b) 'J) 'DarkOrange]
      [(eq? (type b) 'L) 'Blue])))
      


;;desenha-bloco: tela canvas-block -> boolean (true sempre)
;;desenha o bloco do jogador na tela
(define (desenha-tetris block)
  (and (draw-solid-rect (make-posn (* (canvas-block-x1 block) (/ largura colunas)) (* (canvas-block-y1 block) (/ altura linhas))) (/ largura colunas) (/ altura linhas) (get-block-color block))
       (draw-solid-rect (make-posn (* (canvas-block-x2 block) (/ largura colunas)) (* (canvas-block-y2 block) (/ altura linhas))) (/ largura colunas) (/ altura linhas) (get-block-color block))
       (draw-solid-rect (make-posn (* (canvas-block-x3 block) (/ largura colunas)) (* (canvas-block-y3 block) (/ altura linhas))) (/ largura colunas) (/ altura linhas) (get-block-color block))
       (draw-solid-rect (make-posn (* (canvas-block-x4 block) (/ largura colunas)) (* (canvas-block-y4 block) (/ altura linhas))) (/ largura colunas) (/ altura linhas) (get-block-color block))))

;; block-move : direção block -> block
;; move o bloco 1 posição de acordo com direção
(define (block-move dir block)
  (local 
    [(define left (make-block (block-type block) (- (block-xc block) 1) (block-yc block) (block-orient block)))                               
     (define right (make-block (block-type block) (add1(block-xc block))  (block-yc block) (block-orient block)))                               
     (define down (make-block (block-type block) (block-xc block) (+ (block-yc block) 1) (block-orient block)))]
                             
  (cond
    [(symbol=? 'left dir ) left]
    [(symbol=? 'right dir ) right]
    [(symbol=? 'down dir ) down]
    [else block])))


;; block-bottom? : block -> bool
;; Verifica se o bloco chegou no chão
;; Uso: (block-bottom? (make-block 'I 5 0 'south)) retorna #t
(define (block-bottom? b)
  (>= (block-yc b) (- linhas 1)))

;; block-right? : block -> bool
;; Verifica se o bloco chegou na parede direita
(define (block-right? b t)
  (or (>= (block-xc b) (- colunas 1))
      (not (equal? "void" (square-type (get-screen-xy t (+ (block-xc b) 1) (block-yc b)))))))

;; block-left? : block -> bool
;; Verifica se o bloco chegou na parede esquerda
(define (block-left? b t)
  (or (<= (block-xc b) 0)
      (not (equal? "void" (square-type (get-screen-xy t (- (block-xc b) 1) (block-yc b)))))))

;;block-down? : block -> bool
(define (block-down? b t)
  (or (block-bottom? b)
      (not (equal? "void" (square-type (get-screen-xy t (block-xc b) (+ (block-yc b) 1)))))))

;; convert-canvas-block : canvas-block -> list block
;; Transforma um canvas-block em uma lista de block para ser mapeada
(define (convert-canvas-block cb)
  (list(make-block (canvas-block-type cb) (canvas-block-x1 cb) (canvas-block-y1 cb) 'north)
        (make-block (canvas-block-type cb) (canvas-block-x2 cb) (canvas-block-y2 cb) 'north)
        (make-block (canvas-block-type cb) (canvas-block-x3 cb) (canvas-block-y3 cb) 'north)
        (make-block (canvas-block-type cb) (canvas-block-x4 cb) (canvas-block-y4 cb) 'north)))

;; canvas-block-right : canvas-block -> bool 
;; Verifica se a peça chegou na parede direita
(define (canvas-block-right? cb t)
  (or (block-right? (first (convert-canvas-block cb)) t)
      (block-right? (second (convert-canvas-block cb)) t)
      (block-right? (third (convert-canvas-block cb)) t)
      (block-right? (fourth (convert-canvas-block cb)) t)))

;; canvas-block-left : canvas-block -> bool 
;; Verifica se a peça chegou na parede esquerda
(define (canvas-block-left? cb t)
  (or (block-left? (first (convert-canvas-block cb)) t)
      (block-left? (second (convert-canvas-block cb)) t)
      (block-left? (third (convert-canvas-block cb)) t)
      (block-left? (fourth (convert-canvas-block cb)) t)))

;;canvas-block-down : canvas-block -> bool
;; Verifica se a peça bateu em algum bloco fixo
(define (canvas-block-down? cb t)
  (or (block-down? (first (convert-canvas-block cb)) t)
      (block-down? (second (convert-canvas-block cb)) t)
      (block-down? (third (convert-canvas-block cb)) t)
      (block-down? (fourth (convert-canvas-block cb)) t)))

;;set-nesimo: lista inteiro elemento -> tela
;;Modifica o n-esimo elemento da lista para um novo elemento
(define (set-nesimo l i v)
  (cond ((null? l) '())
        ((= i 0) (cons v (cdr l)))
        (else (cons (car l)
                    (set-nesimo (cdr l) (- i 1) v)))))

;;set-screen-xy: tela inteiro inteiro square -> tela
;;altera o square da tela na posição (x,y)
(define (set-screen-xy tela x y square)
  (set-nesimo tela y
              (set-nesimo (get-nesimo y tela) x square)))

;;push-block-on-canvas block tela -> tela
;;Coloca o subbloco na tela
(define (push-block-on-canvas b t)
  (set-screen-xy t (block-xc b) (block-yc b) (make-square "solid" (get-block-color b))))

;;push-canvas-block-on-canvas: canvas-block tela -> tela
;;Coloca o bloco na tela (quando ele fica fixo por colisão embaixo)
(define (push-canvas-block-on-canvas cb t)
  (local
    [(define b (convert-canvas-block cb))]
  (push-block-on-canvas (fourth b)
                        (push-block-on-canvas (third b)
                                              (push-block-on-canvas (second b)
                                                                    (push-block-on-canvas (first b) t))))))
;;random-elem: lista-de-elementos -> elemento
;;retorna um elemento aleatório de uma lista
(define (random-elem l)
  (list-ref l (random (length l))))

;;generate-new-block: inteiro inteiro inteiro -> bloco
;;gera um novo bloco de jogador
(define (generate-new-block minx maxx y)
  (make-block (random-elem lista-tipos) (random minx maxx) y (random-elem lista-orient)))

;;print-square: square inteiro inteiro -> bool
;;Exibe o square na posição x y
(define (print-square sq x y)
  (cond
    [(not (eq? 'white (square-color sq)))
     (draw-solid-rect (make-posn (* x (/ largura colunas)) (* y (/ altura linhas))) (/ largura colunas) (/ altura linhas) (square-color sq))]
    [else true]))


;;print-tela: tela inteiro inteiro -> bool
;;Exibe a tela no canvas
(define (print-tela t lin col)
  (cond
    [(= lin linhas) #t]
    [(= col colunas) (print-tela t (+ lin 1) 0)]
    [else (and (print-square (get-screen-xy t col lin) col lin)
               (print-tela t lin (+ col 1)))]))

;;o estado do jogo é definido pelo bloco do jogador, o estado da tela, a contagem de ticks (a cada 60 o bloco eh forcado para baixo) e o score do jogador
(define-struct estado-de-jogo (bloco-jogador tela ticks score))

;;estado de jogo inicial
(define estado-inicial (make-estado-de-jogo (generate-new-block 3 6 2) (screen-generator linhas colunas) 0 0))

;;can-spawn: tela bloco -> boolean
;;um sub-bloco pode spawnar se a posição na tela for vazia
(define (can-spawn t b)
  (equal? "void" (square-type (get-screen-xy t (block-xc b) (block-yc b)))))

;;teste-fim: tela bloco -> boolean
;;se o novo bloco gerado não puder spawnar, o jogo acaba
(define (teste-spawn t b)
  (local
    [(define cb (convert-block b))
     (define nb (convert-canvas-block cb))]
  (and
   (not (canvas-block-right? cb t))
   (not (canvas-block-left? cb t))
   (can-spawn t (first nb))
   (can-spawn t (second nb))
   (can-spawn t (third nb))
   (can-spawn t (fourth nb)))))

;;avanca-estado: estado-de-jogo -> estado-de-jogo
;;atualiza o estado do jogo a cada tick
(define (avanca-estado estado)
  (local
    [(define tecla (get-key-event))]
  (cond
    [(= (estado-de-jogo-ticks estado) 30) (cond
                                            [(canvas-block-down? (convert-block (estado-de-jogo-bloco-jogador estado)) (estado-de-jogo-tela estado))
                                             (make-estado-de-jogo (generate-new-block 3 6 2)
                                                                  (append-void-lines (delete-full-lines (push-canvas-block-on-canvas (convert-block (estado-de-jogo-bloco-jogador estado))
                                                                                                                                     (estado-de-jogo-tela estado)))
                                                                                     (count-full-lines (push-canvas-block-on-canvas (convert-block (estado-de-jogo-bloco-jogador estado))
                                                                                                                                    (estado-de-jogo-tela estado)))) 
                                                                  0
                                                                  (+ (* 100 (count-full-lines (push-canvas-block-on-canvas (convert-block (estado-de-jogo-bloco-jogador estado))
                                                                                                                           (estado-de-jogo-tela estado))))
                                                                     (estado-de-jogo-score estado)))]
                                            [else (make-estado-de-jogo (block-move 'down (estado-de-jogo-bloco-jogador estado))
                                                  (estado-de-jogo-tela estado)
                                                  0
                                                  (estado-de-jogo-score estado))])]
    [(symbol? tecla) (cond
                       [(and (symbol=? tecla 'down) (canvas-block-down? (convert-block (estado-de-jogo-bloco-jogador estado)) (estado-de-jogo-tela estado)))
                        (make-estado-de-jogo (generate-new-block 3 6 2)
                                             (append-void-lines (delete-full-lines (push-canvas-block-on-canvas (convert-block (estado-de-jogo-bloco-jogador estado))
                                                                                                                (estado-de-jogo-tela estado)))
                                                                (count-full-lines (push-canvas-block-on-canvas (convert-block (estado-de-jogo-bloco-jogador estado))
                                                                                                               (estado-de-jogo-tela estado))))
                                             0
                                               (+ (* 100(count-full-lines (push-canvas-block-on-canvas (convert-block (estado-de-jogo-bloco-jogador estado))
                                                                                                       (estado-de-jogo-tela estado))))
                                                  (estado-de-jogo-score estado)))]
                      [(and (symbol=? tecla 'down) (not(canvas-block-down? (convert-block (estado-de-jogo-bloco-jogador estado)) (estado-de-jogo-tela estado))))
                       (make-estado-de-jogo (block-move tecla (estado-de-jogo-bloco-jogador estado))
                                            (estado-de-jogo-tela estado)
                                            (+ (estado-de-jogo-ticks estado) 1)
                                            (estado-de-jogo-score estado))]
                      [(and (symbol=? tecla 'left) (not(canvas-block-left? (convert-block (estado-de-jogo-bloco-jogador estado))(estado-de-jogo-tela estado))))
                       (make-estado-de-jogo (block-move tecla (estado-de-jogo-bloco-jogador estado))
                                            (estado-de-jogo-tela estado)
                                            (+ (estado-de-jogo-ticks estado) 1)
                                            (estado-de-jogo-score estado))]
                      [(and (symbol=? tecla 'right) (not(canvas-block-right? (convert-block (estado-de-jogo-bloco-jogador estado)) (estado-de-jogo-tela estado))))
                       (make-estado-de-jogo (block-move tecla (estado-de-jogo-bloco-jogador estado))
                                            (estado-de-jogo-tela estado)
                                            (+ (estado-de-jogo-ticks estado) 1)
                                            (estado-de-jogo-score estado))]
                      [else (make-estado-de-jogo (estado-de-jogo-bloco-jogador estado)
                                                 (estado-de-jogo-tela estado)
                                                 (+ (estado-de-jogo-ticks estado) 1)
                                                 (estado-de-jogo-score estado))])]
    [(char? tecla) (cond
                     [(or (char=? #\A tecla) (char=? #\a tecla))
                      (cond
                        [(teste-spawn (estado-de-jogo-tela estado) (rotate-block (estado-de-jogo-bloco-jogador estado) 'left))
                         (make-estado-de-jogo (rotate-block (estado-de-jogo-bloco-jogador estado) 'left)
                                             (estado-de-jogo-tela estado)
                                             (+ (estado-de-jogo-ticks estado) 1)
                                             (estado-de-jogo-score estado))]
                        [else
                         (make-estado-de-jogo (estado-de-jogo-bloco-jogador estado)
                                              (estado-de-jogo-tela estado)
                                              (+ (estado-de-jogo-ticks estado) 1)
                                              (estado-de-jogo-score estado))])]
                     [(or (char=? #\D tecla) (char=? #\d tecla))
                      (cond
                        [(teste-spawn (estado-de-jogo-tela estado) (rotate-block (estado-de-jogo-bloco-jogador estado) 'right))
                         (make-estado-de-jogo (rotate-block (estado-de-jogo-bloco-jogador estado) 'right)
                                             (estado-de-jogo-tela estado)
                                             (+ (estado-de-jogo-ticks estado) 1)
                                             (estado-de-jogo-score estado))]
                        [else
                         (make-estado-de-jogo (estado-de-jogo-bloco-jogador estado)
                                              (estado-de-jogo-tela estado)
                                              (+ (estado-de-jogo-ticks estado) 1)
                                              (estado-de-jogo-score estado))])]
                     [else (make-estado-de-jogo (estado-de-jogo-bloco-jogador estado)
                                                (estado-de-jogo-tela estado)
                                                (+ (estado-de-jogo-ticks estado) 1)
                                                (estado-de-jogo-score estado))])]
                         
    [else (make-estado-de-jogo (estado-de-jogo-bloco-jogador estado)
                               (estado-de-jogo-tela estado)
                               (+ (estado-de-jogo-ticks estado) 1)
                               (estado-de-jogo-score estado))])))


;;testa-estado: estado-de-jogo -> estado-de-jogo
;;testa se o jogo acabou ou se deve continuar
(define (testa-estado estado)
  (cond
    [(not (teste-spawn (estado-de-jogo-tela estado) (generate-new-block 3 6 2))) (local
                                                                           [(define clear (clear-all))
                                                                            (define loser (draw-solid-string (make-posn (/ (+ largura 100) 2) (/ altura 2)) "GAME OVER" ))
                                                                            (define final-score (draw-solid-string (make-posn (/ (+ largura 100) 2) (+ (/ altura 2) 50))
                                                                                                                   (string-append "Final Score: "
                                                                                                                                   (number->string (estado-de-jogo-score estado)))))]
                                                                           (end-of-time))]
    [else (local
            [(define clear (clear-all))
             (define desenha-separador (draw-solid-line (make-posn largura 0) (make-posn largura altura) 'black))
             (define desenha-TETRIS (draw-solid-string (make-posn (+ largura 20) (- (/ altura 2) 100)) "TETRIS"))
             (define desenha-score (draw-solid-string (make-posn (+ largura 20) (/ altura 2)) (string-append "Score: "
                                                                                                             (number->string (estado-de-jogo-score estado)))))
             (define desenha-instrucao-mover (draw-solid-string (make-posn (+ largura 20) (+ (/ altura 2) 100)) "Mover: Setas"))
             (define desenha-instrucao-girar (draw-solid-string (make-posn (+ largura 20) (+ (/ altura 2) 120)) "Girar: A   D"))
             (define desenha-tela (print-tela (estado-de-jogo-tela estado) 0 0))
             (define desenha-bloco (desenha-tetris (convert-block(estado-de-jogo-bloco-jogador estado))))]
            (avanca-estado estado))]))


;;(define clean (clear-all))
;;    (define desenha-tela (print-tela (estado-de-jogo-tela estado) linhas colunas))
;;    (define desenha-bloco (desenha-tetris (convert-block(estado-de-jogo-bloco-jogador estado))))

(define tetris
  (and
   (start (+ largura 200) altura)
   (big-bang (/ 1 60) estado-inicial)
   (on-tick-event testa-estado )
   ) 
)