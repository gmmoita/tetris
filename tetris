#lang racket

;;http://tetris.wikia.com/wiki/Tetris_Guideline
(require htdp/draw)
(require lang/posn)

;;https://github.com/racket/frtime/blob/master/demos/tetris.rkt << take a look

;;definição das dimensões da tela (largura e altura) -> 10 colunas x 22 linhas (as duas de cima hidden (para spawn de I)
(define largura 250)
(define altura 550)
(define colunas 10)
(define linhas 22)

(start largura altura)

;;square é cada quadrado da tela, definido pelo tipo ("void", "solid" ou "mobile") e cor (I - DeepSkyBlue, O - Gold, T - Purple, S - Green, Z - Red, J - DarkOrange, L - Blue, void - White)
;;a tela será uma lista de listas de squares
(define-struct square (type color))

;;block é o tetrominos controlado pelo usuário, definido pelas coordenadas do centroide, orientação (north, south, east, west) e tipo (I, O, T, S, Z, J, ou L)
(define-struct block (type xc yc orient))

;;canvas-block é um conjunto de 4 coordenadas de quadrados a serem colocados na tela, e seu tipo)
(define-struct canvas-block (type x1 y1 x2 y2 x3 y3 x4 y4))

;;exemplo de tela fictícia
(define ex-tela (list
                 (list (make-square "void" "White")(make-square "void" "White")(make-square "void" "White"))
                 (list (make-square "void" "White")(make-square "void" "White")(make-square "void" "White"))
                 (list (make-square "void" "White")(make-square "void" "White")(make-square "void" "White"))
                 (list (make-square "void" "White")(make-square "void" "White")(make-square "void" "White"))
                 (list (make-square "void" "White")(make-square "solid" "Blue")(make-square "void" "White"))
                 (list (make-square "void" "White")(make-square "solid" "Green")(make-square "solid" "Green"))
                 (list (make-square "solid" "Green")(make-square "solid" "Green")(make-square "solid" "Red"))))

(define full-line (list (make-square "solid" "Red")(make-square "solid" "Red")(make-square "solid" "Red")))
(define void-line (list (make-square "void" "White")(make-square "void" "White")(make-square "void" "White")))

;;exemplos de blocos: tipo, coordenada do centróide, orientação
(define ex-I-block (make-block 'I 6 6 'north))
(define ex-O-block (make-block 'O 6 6 'north))
(define ex-T-block (make-block 'T 6 6 'north))
(define ex-S-block (make-block 'S 6 6 'north))
(define ex-Z-block (make-block 'Z 6 6 'north))
(define ex-J-block (make-block 'J 6 6 'north))
(define ex-L-block (make-block 'L 6 6 'north))

;;line-generator: inteiro -> lista (linha da tela)
;;gera uma linha da tela inicial, dependente de "colunas"
(define (line-generator col)
  (cond
    [(= col 0) empty]
    [else (cons (make-square "void" "White") (line-generator (- col 1)))]))

;;screen-generator: inteiro inteiro -> tela
;;gera uma tela de jogo inicial condizente com "linhas" e "colunas"
(define (screen-generator lin col)
  (cond
    [(= lin 0) empty]
    [else (cons (line-generator col) (screen-generator (- lin 1) col))]))

;;get-nesimo: list inteiro -> elemento-da-lista
;;retorna o n-esimo elemento da lista
(define get-nesimo                     
   (lambda (n list)                   
      (cond ((null? list) '())             
            ((= n 0) (car list))              
            (else (get-nesimo (- n 1) (cdr list))))))

;;get-screen-xy: tela inteiro inteiro -> square
;;retorna o square da tela na posição (x,y)
(define (get-screen-xy tela x y)
  (get-nesimo x (get-nesimo y tela)))

;;full-line?: lista-de-squares -> bool
;;retorna se a lista está completamente preenchida
(define (full-line? l)
  (cond
    [(empty? l) true]
    [(not(string=? (square-type (first l)) "solid")) false]
    [else (full-line (rest l))]))

;;count-full-lines: tela -> inteiro
;;retorna o numero de linhas preenchidas
(define (count-full-lines t)
  (cond
    [(empty? t) 0]
    [(full-line? (first t)) (+ 1 (count-full-lines (rest t)))]
    [else (count-full-lines (rest t))]))

;;delete-full-lines: tela -> tela
;;retorna a tela sem as linhas preenchidas
(define (delete-full-lines t)
  (remove* full-line t (lambda (l1 l2) (and (full-line? l1) (full-line? l2)))))

;;append-void-lines: tela inteiro -> tela
;;retorna a tela com um número de linhas vazias adicionado acima
;;uso nesse programa: (append-void-lines (delete-full-lines t) (count-full-lines t))
(define (append-void-lines t n)
  (cond
    [(= 0 n) t]
    [else (cons void-line (append-void-lines t (- n 1)))]))

;;rot-right: symbol -> symbol
;;retorna a nova orientação do bloco rotacionado para a direita
(define (rot-right b)
  (cond
    [(eq? b 'north) 'east]
    [(eq? b 'east) 'south]
    [(eq? b 'south) 'west]
    [(eq? b 'west) 'north]))

;;rot-left: symbol -> symbol
;;retorna a nova orientação do bloco rotacionado para a esquerda
(define (rot-left b)
  (cond
    [(eq? b 'north) 'west]
    [(eq? b 'west) 'south]
    [(eq? b 'south) 'east]
    [(eq? b 'east) 'north]))

;;rotate-block: block symbol -> block
;;retorna o bloco rotacionado para a direita ('right) ou para a esquerda ('left)
(define (rotate-block b rot)
  (cond
    [(eq? rot 'right) (make-block (block-type b) (block-xc b) (block-yc b) (rot-right (block-orient b)))]
    [(eq? rot 'left) (make-block (block-type b) (block-xc b) (block-yc b) (rot-left (block-orient b)))]))

;;convert-block: block -> canvas
;;converte um bloco para colocar no canvas
;;http://i.stack.imgur.com/JLRFu.png (primeira coluna (da esquerda para a direita) = 'north, segunda = 'east, terceira = 'south, quarta = 'west)
(define (convert-block b)
  (cond 
    [(eq? (block-type b) 'O) (make-canvas-block (block-type b)
                                                (- (block-xc b) 1) (block-yc b)
                                                (block-xc b) (block-yc b)
                                                (- (block-xc b) 1) (- (block-yc b) 1)
                                                (block-xc b) (- (block-yc b) 1))]
    [(eq? (block-type b) 'I) (cond
                               [(eq? (block-orient b) 'south) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 2) (block-yc b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'east) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 2)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (block-xc b) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'north) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 2) (- (block-yc b) 1)
                                                                                 (- (block-xc b) 1) (- (block-yc b) 1)
                                                                                 (block-xc b) (- (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'west) (make-canvas-block (block-type b)
                                                                                (- (block-xc b) 1) (+ (block-yc b) 2)
                                                                                (- (block-xc b) 1) (+ (block-yc b) 1)
                                                                                (- (block-xc b) 1) (block-yc b)
                                                                                (- (block-xc b) 1) (- (block-yc b) 1))])]
    [(eq? (block-type b) 'T) (cond
                               [(eq? (block-orient b) 'south) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (block-xc b) (+ (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'east) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (+ (block-xc b) 1) (block-yc b)
                                                                                (block-xc b) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'north) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (block-xc b) (- (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'west) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (- (block-xc b) 1) (block-yc b)
                                                                                (block-xc b) (- (block-yc b) 1))])]
    [(eq? (block-type b) 'J) (cond
                               [(eq? (block-orient b) 'south) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (- (block-xc b) 1) (+ (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'east) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (+ (block-xc b) 1) (+ (block-yc b) 1)
                                                                                (block-xc b) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'north) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (+ (block-xc b) 1) (- (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'west) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (- (block-xc b) 1) (- (block-yc b) 1)
                                                                                (block-xc b) (- (block-yc b) 1))])]
    [(eq? (block-type b) 'L) (cond
                               [(eq? (block-orient b) 'south) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (+ (block-xc b) 1) (+ (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'east) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (+ (block-xc b) 1) (- (block-yc b) 1)
                                                                                (block-xc b) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'north) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (- (block-xc b) 1) (- (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'west) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (- (block-xc b) 1) (+ (block-yc b) 1)
                                                                                (block-xc b) (- (block-yc b) 1))])]
     [(eq? (block-type b) 'S) (cond
                               [(eq? (block-orient b) 'south) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (+ (block-yc b) 1)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (block-xc b) (+ (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'east) (make-canvas-block (block-type b)
                                                                                (+ (block-xc b) 1) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (+ (block-xc b) 1) (block-yc b)
                                                                                (block-xc b) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'north) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (block-xc b) (- (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'west) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (- (block-xc b) 1) (block-yc b)
                                                                                (- (block-xc b) 1) (- (block-yc b) 1))])]
    [(eq? (block-type b) 'Z) (cond
                               [(eq? (block-orient b) 'south) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (block-yc b)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (block-xc b) (+ (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (+ (block-yc b) 1))]
                               [(eq? (block-orient b) 'east) (make-canvas-block (block-type b)
                                                                                (block-xc b) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (+ (block-xc b) 1) (block-yc b)
                                                                                (+ (block-xc b) 1) (- (block-yc b) 1))]
                               [(eq? (block-orient b) 'north) (make-canvas-block (block-type b)
                                                                                 (- (block-xc b) 1) (- (block-yc b) 1)
                                                                                 (block-xc b) (block-yc b)
                                                                                 (block-xc b) (- (block-yc b) 1)
                                                                                 (+ (block-xc b) 1) (block-yc b))]
                               [(eq? (block-orient b) 'west) (make-canvas-block (block-type b)
                                                                                (- (block-xc b) 1) (+ (block-yc b) 1)
                                                                                (block-xc b) (block-yc b)
                                                                                (- (block-xc b) 1) (block-yc b)
                                                                                (block-xc b) (- (block-yc b) 1))])]))

;;desenha-bloco: tela canvas-block -> boolean (true sempre)
;;desenha o bloco do jogador na tela
(define (desenha-tetris block)
  (and (draw-solid-rect (make-posn (* (canvas-block-x1 block) (/ largura colunas)) (* (canvas-block-y1 block) (/ altura linhas))) (/ largura colunas) (/ altura linhas) 'red)
       (draw-solid-rect (make-posn (* (canvas-block-x2 block) (/ largura colunas)) (* (canvas-block-y2 block) (/ altura linhas))) (/ largura colunas) (/ altura linhas) 'red)
       (draw-solid-rect (make-posn (* (canvas-block-x3 block) (/ largura colunas)) (* (canvas-block-y3 block) (/ altura linhas))) (/ largura colunas) (/ altura linhas) 'red)
       (draw-solid-rect (make-posn (* (canvas-block-x4 block) (/ largura colunas)) (* (canvas-block-y4 block) (/ altura linhas))) (/ largura colunas) (/ altura linhas) 'red)))

;; block-move : direção block -> block
;; move o bloco 1 posição de acordo com direção
(define (block-move dir block)
  (local 
    [(define left (make-block (block-type block) (- (block-xc block) 1) (block-yc block) (block-orient block)))                               
     (define right (make-block (block-type block) (add1(block-xc block))  (block-yc block) (block-orient block)))                               
     (define down (make-block (block-type block) (block-xc block) (+ (block-yc block) 1) (block-orient block)))]
                             
  (cond
    [(symbol=? 'left dir ) left]
    [(symbol=? 'right dir ) right]
    [(symbol=? 'down dir ) down])))


;; block-bottom? : block -> bool
;; Verifica se o bloco chegou no chão
;; Uso: (block-bottom? (make-block 'I 5 0 'south)) retorna #t
(define (block-bottom? b)
  (<= (block-yc b) 0))

;; block-right? : block -> bool
;; Verifica se o bloco chegou na parede direita
(define (block-right? b)
  (>= (block-xc b) (- colunas 1)))

;; block-left? : block -> bool
;; Verifica se o bloco chegou na parede esquerda
(define (block-left? b)
  (<= (block-xc b) 0))

;;block-down? : block -> bool
(define (block-down? b t)
  (not (equal? "void" (square-type (get-screen-xy t (block-xc b) (block-yc b))))))

;; convert-canvas-block : canvas-block -> list block
;; Transforma um canvas-block em uma lista de block para ser mapeada
(define (convert-canvas-block cb)
  (list(make-block (canvas-block-type cb) (canvas-block-x1 cb) (canvas-block-y1 cb) 'north)
        (make-block (canvas-block-type cb) (canvas-block-x2 cb) (canvas-block-y2 cb) 'north)
        (make-block (canvas-block-type cb) (canvas-block-x3 cb) (canvas-block-y3 cb) 'north)
        (make-block (canvas-block-type cb) (canvas-block-x4 cb) (canvas-block-y4 cb) 'north)))

;; canvas-block-right : canvas-block -> bool 
;; Verifica se a peça chegou na parede direita
(define (canvas-block-right? cb)
  (ormap block-right? (convert-canvas-block cb)))

;; canvas-block-left : canvas-block -> bool 
;; Verifica se a peça chegou na parede esquerda
(define (canvas-block-left? cb)
  (ormap block-left? (convert-canvas-block cb)))

;;canvas-block-down : canvas-block -> bool
;; Verifica se a peça bateu em algum bloco fixo
(define (canvas-block-down? cb t)
  (ormap block-down? (convert-canvas-block cb) t))




;;Testando se peça bate na parede
(desenha-tetris (convert-block ex-T-block))
(canvas-block-right? (convert-block ex-T-block))
(+ (block-xc ex-T-block) 1)
(sleep 2)
(clear-all)
(desenha-tetris (convert-block (block-move 'right ex-T-block)))
(canvas-block-right? (convert-block (block-move 'right ex-T-block)))
(+ (block-xc ex-T-block) 2)
(sleep 2)
(clear-all)
(desenha-tetris (convert-block (block-move 'right (block-move 'right ex-T-block))))
(canvas-block-right? (convert-block (block-move 'right (block-move 'right ex-T-block))))
(+ (block-xc ex-T-block) 3)
(sleep 2)
(clear-all)
(desenha-tetris (convert-block (block-move 'left (block-move 'right (block-move 'right ex-T-block)))))
(canvas-block-right? (convert-block (block-move 'right (block-move 'left (block-move 'right ex-T-block)))))
(+ (block-xc ex-T-block) 2)